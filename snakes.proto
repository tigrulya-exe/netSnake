syntax = "proto2";
package snakes;
option java_package = "nsu.manasyan.netsnake.out";
option java_outer_classname = "SnakesProto";

/* Игрок */
message GamePlayer {
    required string name = 1;       // Имя игрока (для отображения в интерфейсе)
    required int32 id = 2;          // Уникальный идентификатор игрока в пределах игры
    required string ip_address = 3; // IPv4 или IPv6 адрес игрока в виде строки
    required int32 port = 4;        // Порт UDP-сокета игрока
}

/* Параметры идущей игры (не должны меняться в процессе игры) */
message GameConfig {
    optional int32 width = 1 [default = 40];           // Ширина поля в клетках (от 10 до 100)
    optional int32 height = 2 [default = 30];          // Высота поля в клетках (от 10 до 100)
    optional int32 food_static = 3 [default = 1];      // Количество клеток с едой, независимо от числа игроков (от 0 до 100)
    optional float food_per_player = 4 [default = 1];  // Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
    optional int32 delay_ms = 5 [default = 1000];      // Задержка между ходами (сменой состояний) в игре, в миллисекундах
    optional float dead_food_prob = 6 [default = 0.1]; // Вероятность превращения мёртвой клетки в еду (от 0 до 1).
}

/* Игроки конкретной игры */
message GamePlayers {
    required GamePlayer master = 1; // "Главный" игрок, центр топологии "звезда"
    repeated GamePlayer others = 2; // Список остальных игроков. "Заместителем" главного является игрок с минимальным id
}

/* Текущее состояние игрового поля */
message GameState {
    /* Координаты в пределах игрового поля, либо относительное смещение координат.
     * Левая верхняя клетка поля имеет координаты (x=0, y=0).
     * Направление смещения задаётся знаком чисел. */
    message Coord {
        optional sint32 x = 1 [default = 0]; // По горизонтальной оси, положительное направление - вправо
        optional sint32 y = 2 [default = 0]; // По вертикальной оси, положительное направление - вниз
    }
    message Snake {
        required int32 player_id = 1; // Идентификатор игрока-владельца змеи, см. GamePlayer.id
        /* Список "ключевых" точек змеи. Первая точка хранит координаты головы змеи.
         * Каждая следующая - смещение следующей "ключевой" точки относительно предыдущей.
         * Последняя точка соответствует хвосту змеи. */
        repeated Coord points = 2;
    }
    required int32 state_order = 1;   // Порядковый номер состояния, уникален в пределах игры, монотонно возрастает
    repeated Snake snakes = 2;        // Список змей
    repeated Coord foods = 3;         // Список клеток с едой
    required GamePlayers players = 4; // Актуальнейший список игроков
}

/* Уведомление об идущей игре, регулярно отправляется multicast-ом */
message GameAnnouncementMessage {
    required GamePlayers players = 1;            // Текущие игроки
    required GameConfig config = 2;              // Параметры игры
    optional bool can_join = 3 [default = true]; // Можно ли новому игроку присоединиться к игре (есть ли место на поле)
}

/* Сообщение от одного участника игры другому участнику */
message GameMessage {
    /* Тип сообщения */
    enum Type {
        PING = 0;         // Ничего не меняем, просто говорим что мы живы
        STEER_UP = 1;     // Повернуть голову вверх
        STEER_DOWN = 2;   // Повернуть голову вниз
        STEER_LEFT = 3;   // Повернуть голову влево
        STEER_RIGHT = 4;  // Повернуть голову вправо
        ACK = 5;          // Подтверждение сообщения с таким же seq
        STATE = 6;        // Состояние игры
        JOIN_PLAY = 21;   // Присоединиться к игре в режиме активной игры
        JOIN_WATCH = 22;  // Присоединиться к игре в режиме наблюдения
        JOIN_FAIL = 23;   // Отказ в присоединении к игре (нет места на поле)
        QUIT = 31;        // Выйти из игры, но остаёмся в режиме наблюдения, если продолжаем отправлять пинги главному
        I_AM_MASTER = 41; // Сообщение от заместителя другим игрокам о том, что пора начинать считать его главным
    }
    required Type type = 1;       // Тип сообщения
    required int32 msg_seq = 2;   // Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
    optional GameState state = 3; // Состояние игрового поля, если type = state
}
